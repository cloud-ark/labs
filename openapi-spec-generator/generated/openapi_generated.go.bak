// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package generated

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.BackupCondition":    schema_pkg_apis_mysql_v1alpha1_BackupCondition(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.ClusterCondition":   schema_pkg_apis_mysql_v1alpha1_ClusterCondition(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackup":        schema_pkg_apis_mysql_v1alpha1_MysqlBackup(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupList":    schema_pkg_apis_mysql_v1alpha1_MysqlBackupList(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupSpec":    schema_pkg_apis_mysql_v1alpha1_MysqlBackupSpec(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupStatus":  schema_pkg_apis_mysql_v1alpha1_MysqlBackupStatus(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlCluster":       schema_pkg_apis_mysql_v1alpha1_MysqlCluster(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterList":   schema_pkg_apis_mysql_v1alpha1_MysqlClusterList(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterSpec":   schema_pkg_apis_mysql_v1alpha1_MysqlClusterSpec(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterStatus": schema_pkg_apis_mysql_v1alpha1_MysqlClusterStatus(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeCondition":      schema_pkg_apis_mysql_v1alpha1_NodeCondition(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeStatus":         schema_pkg_apis_mysql_v1alpha1_NodeStatus(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.PodSpec":            schema_pkg_apis_mysql_v1alpha1_PodSpec(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.QueryLimits":        schema_pkg_apis_mysql_v1alpha1_QueryLimits(ref),
		"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.VolumeSpec":         schema_pkg_apis_mysql_v1alpha1_VolumeSpec(ref),
	}
}

func schema_pkg_apis_mysql_v1alpha1_BackupCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BackupCondition defines condition struct for backup resource",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type of cluster condition, values in (\"Ready\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of (\"True\", \"False\", \"Unknown\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastTransitionTime",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_ClusterCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterCondition defines type for cluster conditions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "type of cluster condition, values in (\"Ready\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of (\"True\", \"False\", \"Unknown\")",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastTransitionTime",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "Reason",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status", "lastTransitionTime", "reason", "message"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlBackup(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlBackup is the Schema for the mysqlbackups API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupSpec", "github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackupStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlBackupList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlBackupList contains a list of MysqlBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackup"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlBackup", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlBackupSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlBackupSpec defines the desired state of MysqlBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "ClustterName represents the cluster for which to take backup",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupURI": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify an URI where to put the backup. This is deprecated and will be removed in future releases. Use BackupURL instead.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupURL": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupURL represents the URL to the backup location, this can be partially specifyied. Default is used the one specified in the cluster. Is the same as backupURI.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupSecretName the name of secrets that contains the credentials to access the bucket. Default is used the secret specified in cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"remoteDeletePolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "RemoteDeletePolicy the deletion policy that specify how to treat the data from remote storage. By default it's used softDelete.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"clusterName"},
			},
		},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlBackupStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlBackupStatus defines the observed state of MysqlBackup",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"completed": {
						SchemaProps: spec.SchemaProps{
							Description: "Complete marks the backup in final state",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"backupURI": {
						SchemaProps: spec.SchemaProps{
							Description: "BackupURI represent the fully uri to the backup location This field is deprecated and will be removed in future releases.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the backup resource conditions list.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.BackupCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.BackupCondition"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlCluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlCluster is the Schema for the mysqlclusters API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterSpec", "github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlClusterList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlClusterList contains a list of MysqlCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlCluster"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.MysqlCluster", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlClusterSpec defines the desired state of MysqlCluster nolint: maligned",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods. This updates replicas filed Defaults to 0",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "The secret name that contains connection information to initialize database, like USER, PASSWORD, ROOT_PASSWORD and so on This secret will be updated with DB_CONNECT_URL and some more configs. Can be specified partially",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"mysqlVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the percona image tag. Defaults to 5.7",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "To specify the image that will be used for mysql server container. If this is specified then the mysqlVersion is ignored.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initBucketURI": {
						SchemaProps: spec.SchemaProps{
							Description: "A bucket URI that contains a xtrabackup to initialize the mysql database.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"initBucketSecretName": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"minAvailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of pods from that set that must still be available after the eviction, even in the absence of the evicted pod Defaults to 50%",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupSchedule": {
						SchemaProps: spec.SchemaProps{
							Description: "Specify under crontab format interval to take backups leave it empty to deactivate the backup process Defaults to \"\"",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupURI": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the location where to put backups. DEPRECATED: use BackupURL instead. This field will be dropped in next versions.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupURL": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents an URL to the location where to put backups. This field is the same as backupUri.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupSecretName": {
						SchemaProps: spec.SchemaProps{
							Description: "Represents the name of the secret that contains credentials to connect to the storage provider to store backups.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"backupScheduleJobsHistoryLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "If set keeps last BackupScheduleJobsHistoryLimit Backups",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"mysqlConf": {
						SchemaProps: spec.SchemaProps{
							Description: "A map[string]string that will be passed to my.cnf file.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
									},
								},
							},
						},
					},
					"podSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod extra specification",
							Ref:         ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.PodSpec"),
						},
					},
					"volumeSpec": {
						SchemaProps: spec.SchemaProps{
							Description: "PVC extra specifiaction",
							Ref:         ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.VolumeSpec"),
						},
					},
					"maxSlaveLatency": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSlaveLatency represents the allowed latency for a slave node in seconds. If set then the node with a latency grater than this is removed from service.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"queryLimits": {
						SchemaProps: spec.SchemaProps{
							Description: "QueryLimits represents limits for a query",
							Ref:         ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.QueryLimits"),
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Makes the cluster READ ONLY. Set the master to writable or ReadOnly",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
				Required: []string{"secretName"},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.PodSpec", "github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.QueryLimits", "github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.VolumeSpec", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_MysqlClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MysqlClusterStatus defines the observed state of MysqlCluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"readyNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadyNodes represents number of the nodes that are in ready state",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions contains the list of the cluster conditions fulfilled",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.ClusterCondition"),
									},
								},
							},
						},
					},
					"nodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Nodes contains informations from orchestrator",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.ClusterCondition", "github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeStatus"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_NodeCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeCondition defines type for representing node conditions.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"type", "status", "lastTransitionTime"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeStatus defines type for status of a node into cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"github.com/presslabs/mysql-operator/pkg/apis/mysql/v1alpha1.NodeCondition"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_PodSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodSpec defines type for configure cluster pod spec.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"imagePullPolicy": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"imagePullSecrets": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.LocalObjectReference", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_mysql_v1alpha1_QueryLimits(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "QueryLimits represents the pt-kill parameters, more info can be found here: https://www.percona.com/doc/percona-toolkit/LATEST/pt-kill.html",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"maxIdleTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxIdleTime match queries that have been idle for longer then this time, in seconds. (--idle-time flag)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxQueryTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxQueryTime match queries that have been running for longer then this time, in seconds. This field is required. (--busy-time flag)",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"kill": {
						SchemaProps: spec.SchemaProps{
							Description: "Kill represents the mode of which the matching queries in each class will be killed, (the --victims flag). Can be one of oldest|all|all-but-oldest. By default, the matching query with the highest Time value is killed (the oldest query.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"killMode": {
						SchemaProps: spec.SchemaProps{
							Description: "KillMode can be: `connection` or `query`, when it's used `connection` means that when a query is matched the connection is killed (using --kill flag) and if it's used `query` means that the query is killed (using --kill-query flag)",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ignoreDb": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreDb is the list of database that are ignored by pt-kill (--ignore-db flag).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ignoreCommand": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreCommands the list of commands to be ignored.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"ignoreUser": {
						SchemaProps: spec.SchemaProps{
							Description: "IgnoreUser the list of users to be ignored.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"maxQueryTime"},
			},
		},
	}
}

func schema_pkg_apis_mysql_v1alpha1_VolumeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "VolumeSpec is the desired spec for storing mysql data. Only one of its members may be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"accessModes": {
						SchemaProps: spec.SchemaProps{
							Description: "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "A label query over volumes to consider for binding.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"volumeName": {
						SchemaProps: spec.SchemaProps{
							Description: "VolumeName is the binding reference to the PersistentVolume backing this claim.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"storageClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"volumeMode": {
						SchemaProps: spec.SchemaProps{
							Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is an alpha feature and may change in the future.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"emptyDir": {
						SchemaProps: spec.SchemaProps{
							Description: "EmptyDir to use as data volume for mysql. EmptyDir represents a temporary directory that shares a pod's lifetime.",
							Ref:         ref("k8s.io/api/core/v1.EmptyDirVolumeSource"),
						},
					},
					"hostPath": {
						SchemaProps: spec.SchemaProps{
							Description: "HostPath to use as data volume for mysql. HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container.",
							Ref:         ref("k8s.io/api/core/v1.HostPathVolumeSource"),
						},
					},
					"persistentVolumeClaim": {
						SchemaProps: spec.SchemaProps{
							Description: "PersistentVolumeClaim to specify PVC spec for the volume for mysql data. It has the highest level of precedence, followed by HostPath and EmptyDir. And represents the PVC specification.",
							Ref:         ref("k8s.io/api/core/v1.PersistentVolumeClaimSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EmptyDirVolumeSource", "k8s.io/api/core/v1.HostPathVolumeSource", "k8s.io/api/core/v1.PersistentVolumeClaimSpec", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}
