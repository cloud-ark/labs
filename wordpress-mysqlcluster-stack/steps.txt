Setup:
------
Install Helm v3
Install jq

Clone KubePlus repo:
- git clone --depth 1 https://github.com/cloud-ark/kubeplus.git

Create a two node GKE cluster
- Check scripts/create-gke-cluster.sh
  - Modify the script as needed

Once the cluster is ready, install KubePlus

- cd kubeplus/deploy
- ./deploy-kubeplus.sh
- cd ../

Check KubePlus status:
- kubectl get pods (verify if kubeplus Pod shows as 5/5 Running)

Once KubePlus is running open a proxy to connect to KubePlus
- Open a new terminal and run:
  - kubectl port-forward  kubeplus -n default 8081:8090

Install KubePlus kubectl plugins:
- export KUBEPLUS_HOME=`pwd` (the kubeplus directory.)
- export PATH=$KUBEPLUS_HOME/plugins/:$PATH
- kubectl kubeplus commands

- Install MysqlCluster Operator on the cluster
  - helm install mysqloperator https://github.com/cloud-ark/operatorcharts/blob/master/mysql-operator-0.2.5-7.tgz?raw=true


Create new API:
---------------
Extrace provider kubeconfig:
- kubectl retrieve kubeconfig provider default > gke-provider.json

Create WordPressStack Custom Resource Definition (CRD)
- cd examples/multitenancy/wordpress-mysqlcluster-stack
- Check wordpress-service-composition.yaml
  - If required modify the Pod policies in the podconfig section (cpu/memory requests and limits) 
  - kubectl create -f wordpress-service-composition.yaml --kubeconfig=gke-provider.json
- Verify WordpressStack CRD registered
  - kubectl get crds | grep 'wordpress'
  - Wait till the CRD is not created (CRD name to look for: wordpressservices.platformapi.kubeplus)

Grant permission on WordpressService to consumer
- kubectl grantpermission consumer wordpressservices gke-provider.json default


Create Tenant1 Wordpress stack: 
-----------------------------------
Deploy WordPressService for tenant1
- kubectl get nodes
- Choose a node name and add it to 'nodeName' attribute to tenant1.yaml
- Create namespace
  - kubectl create ns wp-stack-ns1
- Check/modify the namespace defined in tenant1.yaml if required.
  - kubectl create -f tenant1.yaml

Verify that WP instance is created:
- kubectl get ns
  -> verify that namespace defined in tenant1.yaml is created
- kubectl get pods -n <namespace-from-tenant1.yaml> 

Verify policy:
- kubectl get pods -n wp-stack-ns1
- kubectl get pods wordpress-pod -n wp-stack-ns1 -o json | jq -r '.spec.containers[0].resources'
- kubectl get pods wordpress-pod -n wp-stack-ns1 -o json | jq -r '.spec.nodeName'
- kubectl get pods tenant1-mysql-0 -n wp-stack-ns1 -o json | jq -r '.spec.containers[0].resources'
- kubectl get pods tenant1-mysql-0  -n wp-stack-ns1 -o json | jq -r '.spec.nodeName'

Retrieve consumption metrics:
- curl -kv "http://127.0.0.1:8081/apis/kubeplus/metrics?kind=WordpressService&instance=wp-service-tenant1&namespace=wp-stack-ns1"

  The output should be of following type:

   cpu{custom_resource="wp-service-tenant1"} 32 1614515921407
   memory{custom_resource="wp-service-tenant1"} 304 1614515921407
   storage{custom_resource="wp-service-tenant1"} 2 1614515921407
   pods{custom_resource="wp-service-tenant1"} 2 1614515921407
   containers{custom_resource="wp-service-tenant1"} 8 1614515921407
   network_receive_bytes_total{custom_resource="wp-service-tenant1"} 415446.0 1614515921407
   network_transmit_bytes_total{custom_resource="wp-service-tenant1"} 509238.0 1614515921407

Visualize Topology:
- kubectl connections WordpressService wp-service-tenant1 wp-stack-ns1 -o png -i ServiceAccount:default,Namespace:wp-stack-ns1,Service:tenant1-mysql-master

  - Check the generated png file. For reference check wp-service-connections.png


Create Tenant2 Wordpress stack: 
-------------------------------
Deploy WordPressService for tenant2
- kubectl get nodes
- Choose a node name and add it to 'nodeName' attribute to tenant2.yaml
- Create namespace
  - kubectl create ns wp-stack-ns2
- kubectl create -f tenant2.yaml

Verify policy:
- kubectl get pods wordpressservice-tenant2-mysql-0 -n wp-stack-ns2 -o json | jq -r '.spec.containers[0].resources'
- kubectl get pods wordpressservice-tenant2-mysql-0 -n wp-stack-ns2 -o json | jq -r '.spec.nodeName'
- kubectl get pods wordpress-pod -n wp-stack-ns2 -o json | jq -r '.spec.containers[0].resources'
- kubectl get pods wordpress-pod -n wp-stack-ns2 -o json | jq -r '.spec.nodeName'

Retrieve consumption metrics:
- curl -kv "http://127.0.0.1:8081/apis/kubeplus/metrics?kind=WordpressService&instance=wp-service-tenant2&namespace=wp-stack-ns2"

   cpu{custom_resource="wp-service-tenant2"} 22 1614516379943
   memory{custom_resource="wp-service-tenant2"} 288 1614516379943
   storage{custom_resource="wp-service-tenant2"} 2 1614516379943
   pods{custom_resource="wp-service-tenant2"} 2 1614516379943
   containers{custom_resource="wp-service-tenant2"} 8 1614516379943
   network_receive_bytes_total{custom_resource="wp-service-tenant2"} 404525.0 1614516379943
   network_transmit_bytes_total{custom_resource="wp-service-tenant2"} 540887.0 1614516379943


Visualize Topology:
- kubectl connections WordpressService wp-service-tenant2 wp-stack-ns2 -o png -i ServiceAccount:default,Namespace:default

  - Check the generated png file. For reference check tenant2.png


Create Tenant3 stack (use Consumer UI):
----------------------------------------
Open connection to Consumer UI
- cd deploy
- ./open-consumer-ui.sh

Open Consumer UI:
- Open url: http://localhost:5000/service/WordpressService

Check API Doc

Create Instance
- fill the form details and submit
- Once the instance is created you will see the metrics and relationship graph for that instance



Cleanup
--------
- kubectl delete -f tenant1.yaml
- kubectl delete -f tenant2.yaml
- kubectl delete -f wordpress-service-composition.yaml
